"use strict";(self.webpackChunkkrebit_apidocs=self.webpackChunkkrebit_apidocs||[]).push([[9854],{53593:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"getting-started/ai-prompts","title":"Quickstart: AI prompts","description":"Use ready-made prompts to work with the Krebit Sign API when collaborating with AI coding assistants.","source":"@site/docs/getting-started/ai-prompts.md","sourceDirName":"getting-started","slug":"/getting-started/ai-prompts","permalink":"/docs/getting-started/ai-prompts","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Quickstart: AI prompts","description":"Use ready-made prompts to work with the Krebit Sign API when collaborating with AI coding assistants.","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Authentication","permalink":"/docs/authentication/"},"next":{"title":"Users","permalink":"/docs/users/"}}');var s=i(74848),r=i(28453);const a={title:"Quickstart: AI prompts",description:"Use ready-made prompts to work with the Krebit Sign API when collaborating with AI coding assistants.",sidebar_position:1},o="Quickstart: Using AI prompts with the Krebit Sign API",d={},l=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Set up your Krebit Sign account",id:"set-up-your-krebit-sign-account",level:2},{value:"Starter prompt",id:"starter-prompt",level:2},{value:"Feature prompts",id:"feature-prompts",level:2},{value:"Hosted OAuth and token refresh",id:"hosted-oauth-and-token-refresh",level:3},{value:"4. Debugging scenarios and error handling",id:"4-debugging-scenarios-and-error-handling",level:2},{value:"5. Testing and validation instructions",id:"5-testing-and-validation-instructions",level:2},{value:"6. Additional considerations and future enhancements",id:"6-additional-considerations-and-future-enhancements",level:2},{value:"1. Feature overview",id:"1-feature-overview",level:2},{value:"2. Environment and dependencies",id:"2-environment-and-dependencies",level:2},{value:"3. Implementation details",id:"3-implementation-details",level:2},{value:"4. Debugging scenarios and error handling",id:"4-debugging-scenarios-and-error-handling-1",level:2},{value:"5. Testing and validation instructions",id:"5-testing-and-validation-instructions-1",level:2},{value:"6. Additional considerations and future enhancements",id:"6-additional-considerations-and-future-enhancements-1",level:2},{value:"1. Feature overview",id:"1-feature-overview-1",level:2},{value:"2. Environment and dependencies",id:"2-environment-and-dependencies-1",level:2},{value:"3. Implementation details",id:"3-implementation-details-1",level:2},{value:"4. Debugging scenarios and error handling",id:"4-debugging-scenarios-and-error-handling-2",level:2},{value:"5. Testing and validation instructions",id:"5-testing-and-validation-instructions-2",level:2},{value:"6. Additional considerations and future enhancements",id:"6-additional-considerations-and-future-enhancements-2",level:2},{value:"1. Feature overview",id:"1-feature-overview-2",level:2},{value:"2. Environment and dependencies",id:"2-environment-and-dependencies-2",level:2},{value:"3. Implementation details",id:"3-implementation-details-2",level:2},{value:"4. Debugging scenarios and error handling",id:"4-debugging-scenarios-and-error-handling-3",level:2},{value:"5. Testing and validation instructions",id:"5-testing-and-validation-instructions-3",level:2},{value:"6. Additional considerations and future enhancements",id:"6-additional-considerations-and-future-enhancements-3",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"quickstart-using-ai-prompts-with-the-krebit-sign-api",children:"Quickstart: Using AI prompts with the Krebit Sign API"})}),"\n",(0,s.jsx)(n.p,{children:"In this guide, you will find copy-paste prompts that help large language models (LLMs) produce accurate code for the Krebit Sign API. Use them inside AI-enabled IDEs (Cursor, GitHub Copilot, Zed, Windsurf, and so on) to bootstrap working integrations that follow Krebit's conventions and best practices."}),"\n",(0,s.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsx)(n.p,{children:"For this guide, assume that you are prompting an LLM through an AI-focused IDE. If you are evaluating different tools, read the following references:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://docs.cursor.com/context/rules-for-ai",children:"Cursor"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://docs.github.com/en/enterprise-cloud@latest/copilot/customizing-copilot/adding-repository-custom-instructions-for-github-copilot",children:"GitHub Copilot"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://zed.dev/docs/assistant/prompting",children:"Zed"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://docs.codeium.com/chat/overview#persistent-context",children:"Windsurf"})}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"A basic understanding of the Krebit Sign API endpoints you want to call will make the prompts more effective."}),"\n",(0,s.jsx)(n.h2,{id:"set-up-your-krebit-sign-account",children:"Set up your Krebit Sign account"}),"\n",(0,s.jsx)(n.p,{children:"Do the following tasks before asking the LLM to generate code:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Create a Krebit organization"}),": Visit ",(0,s.jsx)(n.code,{children:"https://{organization}.krebit.se/developer/my-apps"})," (replace ",(0,s.jsx)(n.code,{children:"{organization}"})," with your tenant name) and register or sign in."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Register an OAuth application"}),": Create an app from the developer portal to obtain a ",(0,s.jsx)(n.code,{children:"client_id"})," and ",(0,s.jsx)(n.code,{children:"client_secret"}),". Store them as ",(0,s.jsx)(n.code,{children:"KREBIT_CLIENT_ID"})," and ",(0,s.jsx)(n.code,{children:"KREBIT_CLIENT_SECRET"})," in your environment."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Choose a redirect URI"}),": Define where Krebit should send users after they approve access. Save it as ",(0,s.jsx)(n.code,{children:"KREBIT_REDIRECT_URI"})," and add the same value to your app's callback settings."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Capture your base domain"}),": Save your tenant domain (for example, ",(0,s.jsx)(n.code,{children:"yourco.krebit.se"}),") as ",(0,s.jsx)(n.code,{children:"KREBIT_ORGANIZATION_DOMAIN"}),". The base API URL becomes ",(0,s.jsx)(n.code,{children:"https://$KREBIT_ORGANIZATION_DOMAIN"})," and all REST endpoints live under ",(0,s.jsx)(n.code,{children:"/api/1.0"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Protect your secrets"}),": Use a ",(0,s.jsx)(n.code,{children:".env"})," file or a secrets manager. Never hard-code credentials inside client-side or shared code snippets."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"With these pieces in place, you can guide an LLM to acquire tokens and call authenticated endpoints."}),"\n",(0,s.jsx)(n.h2,{id:"starter-prompt",children:"Starter prompt"}),"\n",(0,s.jsx)(n.p,{children:"Copy the following prompt into your LLM to establish the correct context before generating any Krebit Sign API code."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"You are an expert in building with the Krebit Sign API. Your goal is to help developers quickly build digital signing workflows for their SaaS applications. Use the following documentation and rules whenever you answer:\n\n## API surface\n- The Krebit Sign API base URL is `https://{organization}.krebit.se/api/1.0`. Replace `{organization}` with the tenant subdomain (for example, `yourco.krebit.se`).\n- Authentication uses the OAuth 2.0 Authorization Code flow. Users grant access through `https://{organization}.krebit.se/oauth/authorize`, and the backend exchanges the authorization code for tokens at `https://{organization}.krebit.se/api/oauth/token`.\n- Every API request must include `Authorization: Bearer <access_token>` and `Accept: application/json`. Use `Content-Type: application/json` for JSON payloads and `multipart/form-data` when uploading documents.\n\n## Environment setup\n1. Read `KREBIT_CLIENT_ID`, `KREBIT_CLIENT_SECRET`, `KREBIT_REDIRECT_URI`, and `KREBIT_ORGANIZATION_DOMAIN` from environment variables. Build `KREBIT_BASE_URL = https://$KREBIT_ORGANIZATION_DOMAIN` and append `/api/1.0` for REST endpoints.\n2. After exchanging the authorization code, store the returned `access_token` (and optional `refresh_token`) securely\u2014never commit them to source control. Reference them at runtime as `KREBIT_ACCESS_TOKEN`.\n3. Use HTTPS for every request. If you are running against a non-production tenant, still rely on TLS and valid redirect URIs.\n4. Only persist tokens or user-specific data in your database after encrypting at rest and limiting access.\n\n## Implementation steps\n1. **Implement OAuth**: Generate the authorization URL with the registered redirect URI and a CSRF-resistant `state` value. Handle the callback, verify `state`, and call `POST /api/oauth/token` with `grant_type=authorization_code` to obtain bearer tokens.\n2. **Create a reusable HTTP client**: Configure the client with the `Authorization` header and JSON defaults. Consider automatically refreshing tokens by calling `POST /api/oauth/token` with `grant_type=refresh_token`.\n3. **Call Krebit endpoints**: Show working examples that use `/api/1.0` routes\u2014`GET /api/1.0/me` to validate authentication, `POST /api/1.0/signings` to create drafts, `POST /api/1.0/signings/{uuid}/documents` to upload PDFs, `POST /api/1.0/signings/{uuid}/recipients` to add signers, and `POST /api/1.0/signings/{uuid}/send` to trigger delivery.\n4. **Handle responses**: Parse JSON payloads, inspect `request_id` fields when present, and surface useful status to the caller. Map HTTP status codes to actionable error messages.\n5. **Plan extensions**: Suggest how to read signing status, download completed documents, set up webhooks, or cancel a signing. Always cite the relevant Krebit Sign docs or OpenAPI schema before proposing new code.\n\n## Best practices\n- Validate all input before calling Krebit endpoints. Enforce required fields (for example, signing `name`, `language`, and signer `email`).\n- Guard critical operations with try/catch blocks, log failures with request IDs, and back off or retry when you receive 5xx or 429 responses.\n- Paginate list operations using Krebit's cursor parameters. Avoid fetching more than necessary in a single call.\n- Mask or hash personally identifiable information (PII) when persisting signer details.\n\n## Security guidelines\n- Never expose `client_secret`, tokens, or webhook secrets in frontend code, logs, or generated documentation.\n- Use HTTPS redirects and same-origin CSRF protections on OAuth callbacks.\n- Rotate refresh tokens and webhook secrets periodically.\n\n## Performance guidelines\n- Prefer webhooks over polling when you need near real-time signing updates.\n- Cache infrequently changing data such as signer profiles or signing templates when appropriate.\n- Stream file uploads/downloads to avoid loading large PDFs entirely into memory.\n\nWhen responding, reference the official Krebit Sign API documentation available in your Krebit developer portal (including this docs site) for authoritative details, and clarify any assumptions if the docs do not cover a topic.\n"})}),"\n",(0,s.jsx)(n.h2,{id:"feature-prompts",children:"Feature prompts"}),"\n",(0,s.jsx)(n.p,{children:"Use the prompts below to guide the LLM through common Krebit Sign API workflows. Each prompt assumes you already completed the OAuth flow and have access to a valid bearer token."}),"\n",(0,s.jsx)(n.h3,{id:"hosted-oauth-and-token-refresh",children:"Hosted OAuth and token refresh"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"## 1. Feature overview\n- **Feature name**: Krebit OAuth Authorization Code flow implementation\n- **Objective**: Build backend endpoints that start the OAuth flow, exchange authorization codes for access and refresh tokens, persist them securely, and refresh tokens before expiry.\n\n## 2. Environment and dependencies\n- Base domain: `https://$KREBIT_ORGANIZATION_DOMAIN`\n- Environment variables: `KREBIT_CLIENT_ID`, `KREBIT_CLIENT_SECRET`, `KREBIT_REDIRECT_URI`, `KREBIT_ORGANIZATION_DOMAIN`\n- Dependencies: Express.js, axios, express-session (or a similar session store), crypto (for `state`), and a persistence layer (in-memory store for demos, database for production)\n\n## 3. Implementation details\n- **GET /auth/krebit/start**: Generate an authorization URL for `https://$KREBIT_ORGANIZATION_DOMAIN/oauth/authorize` with `response_type=code`, your redirect URI, and a random `state`. Persist the `state` value (session, signed cookie, or database) before redirecting the browser.\n\n```ts\nimport crypto from 'node:crypto';\nimport express from 'express';\n\nconst app = express();\n\napp.get('/auth/krebit/start', (req, res) => {\n  const state = crypto.randomUUID();\n  req.session.state = state;\n\n  const authorizeUrl = new URL(`https://${process.env.KREBIT_ORGANIZATION_DOMAIN}/oauth/authorize`);\n  authorizeUrl.searchParams.set('client_id', process.env.KREBIT_CLIENT_ID!);\n  authorizeUrl.searchParams.set('redirect_uri', process.env.KREBIT_REDIRECT_URI!);\n  authorizeUrl.searchParams.set('response_type', 'code');\n  authorizeUrl.searchParams.set('state', state);\n\n  res.redirect(authorizeUrl.toString());\n});\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"GET /auth/krebit/callback"}),": Validate the ",(0,s.jsx)(n.code,{children:"state"}),", exchange the code by POSTing to ",(0,s.jsx)(n.code,{children:"/api/oauth/token"})," with ",(0,s.jsx)(n.code,{children:"Content-Type: application/x-www-form-urlencoded"}),", and save the resulting tokens."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import axios from 'axios';\nimport qs from 'qs';\n\napp.get('/auth/krebit/callback', async (req, res, next) => {\n  try {\n    if (req.query.state !== req.session.state) {\n      return res.status(400).send('Invalid OAuth state');\n    }\n\n    const tokenUrl = `https://${process.env.KREBIT_ORGANIZATION_DOMAIN}/api/oauth/token`;\n    const body = qs.stringify({\n      grant_type: 'authorization_code',\n      client_id: process.env.KREBIT_CLIENT_ID,\n      client_secret: process.env.KREBIT_CLIENT_SECRET,\n      redirect_uri: process.env.KREBIT_REDIRECT_URI,\n      code: req.query.code,\n    });\n\n    const { data } = await axios.post(tokenUrl, body, {\n      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n    });\n\n    // tokenStore represents your persistence layer for storing encrypted tokens per user/tenant.\n    await tokenStore.save({\n      accessToken: data.access_token,\n      refreshToken: data.refresh_token,\n      expiresAt: Date.now() + data.expires_in * 1000,\n    });\n\n    res.redirect('/dashboard');\n  } catch (error) {\n    next(error);\n  }\n});\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"POST /auth/krebit/refresh"}),": When ",(0,s.jsx)(n.code,{children:"expiresAt"})," is near, call the same token endpoint with ",(0,s.jsx)(n.code,{children:"grant_type=refresh_token"}),". Update the stored access token and expiry timestamp."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"4-debugging-scenarios-and-error-handling",children:"4. Debugging scenarios and error handling"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"State mismatch: log both values and clear the session before prompting the user to restart authorization."}),"\n",(0,s.jsx)(n.li,{children:"Invalid redirect URI errors: confirm the exact URI (scheme, host, and path) is registered on the Krebit developer portal."}),"\n",(0,s.jsxs)(n.li,{children:["Token exchange failures: log HTTP status, response payload, and Krebit ",(0,s.jsx)(n.code,{children:"request_id"})," headers for support."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"5-testing-and-validation-instructions",children:"5. Testing and validation instructions"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:['Manual: Use a "Connect Krebit" button that hits ',(0,s.jsx)(n.code,{children:"/auth/krebit/start"}),", complete the login, and confirm your application receives an access token."]}),"\n",(0,s.jsxs)(n.li,{children:["Automated: Write integration tests that mock the token endpoint and assert that the app stores refreshed tokens when ",(0,s.jsx)(n.code,{children:"expiresAt"})," is in the past."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"6-additional-considerations-and-future-enhancements",children:"6. Additional considerations and future enhancements"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Encrypt tokens at rest and scope database access tightly."}),"\n",(0,s.jsx)(n.li,{children:"Implement background refresh ahead of expiry to avoid blocking user actions."}),"\n",(0,s.jsxs)(n.li,{children:["Consider multi-tenant storage keyed by the Krebit user ID returned from ",(0,s.jsx)(n.code,{children:"GET /api/1.0/me"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"\n### Create, populate, and send a signing package\n\n"})}),"\n",(0,s.jsx)(n.h2,{id:"1-feature-overview",children:"1. Feature overview"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Feature name"}),": Krebit signing draft creation and dispatch"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Objective"}),": Create a signing draft, upload documents, add recipients, and send the signing for execution using Krebit endpoints."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"2-environment-and-dependencies",children:"2. Environment and dependencies"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Base API URL: ",(0,s.jsx)(n.code,{children:"${baseUrl}/api/1.0"})]}),"\n",(0,s.jsx)(n.li,{children:"Requirements: Access token with signing scope, axios (or fetch), form-data for uploads, fs for reading PDFs"}),"\n",(0,s.jsx)(n.li,{children:"Assumptions: OAuth flow is complete and you have a signing name, message, and signer details"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"3-implementation-details",children:"3. Implementation details"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Step 1 \u2013 Create a draft"}),": POST to ",(0,s.jsx)(n.code,{children:"/api/1.0/signings"})," with ",(0,s.jsx)(n.code,{children:"{ name, language: 'EN', message, signing_order: 'parallel' | 'sequential' }"}),". Store the returned ",(0,s.jsx)(n.code,{children:"id"})," (UUID)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Step 2 \u2013 Upload documents"}),": For each file, POST to ",(0,s.jsx)(n.code,{children:"/api/1.0/signings/{signingId}/documents"})," using ",(0,s.jsx)(n.code,{children:"multipart/form-data"})," with the field ",(0,s.jsx)(n.code,{children:"selected_file"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"import axios from 'axios';\nimport FormData from 'form-data';\nimport fs from 'node:fs';\n\nconst baseUrl = `https://${process.env.KREBIT_ORGANIZATION_DOMAIN}/api/1.0`;\nconst client = axios.create({\n  baseURL: baseUrl,\n  headers: {\n    // tokenStore.getAccessToken() should read a valid, unexpired token from your persistence layer.\n    Authorization: `Bearer ${await tokenStore.getAccessToken()}`,\n    Accept: 'application/json',\n  },\n});\n\nconst { data: signing } = await client.post('/signings', {\n  name: 'Partnership Agreement',\n  language: 'EN',\n  message: 'Please review and sign the attached agreement.',\n  signing_order: 'sequential',\n});\n\nconst file = new FormData();\nfile.append('selected_file', fs.createReadStream('./agreements/contract.pdf'));\nawait client.post(`/signings/${signing.data.id}/documents`, file, {\n  headers: file.getHeaders(),\n  maxBodyLength: Infinity,\n});\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Step 3 \u2013 Add recipients"}),": POST to ",(0,s.jsx)(n.code,{children:"/api/1.0/signings/{signingId}/recipients"})," with signer details (first name, last name, email, optional phone, signing_method ",(0,s.jsx)(n.code,{children:"bankid | email | approval"}),"). Add recipients in the correct order for sequential signing."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Step 4 \u2013 Dispatch"}),": POST to ",(0,s.jsx)(n.code,{children:"/api/1.0/signings/{signingId}/send"})," to notify all recipients. Persist the response for status tracking."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"4-debugging-scenarios-and-error-handling-1",children:"4. Debugging scenarios and error handling"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["400 errors on draft creation: confirm required fields are present and enum values (",(0,s.jsx)(n.code,{children:"language"}),", ",(0,s.jsx)(n.code,{children:"signing_order"}),", ",(0,s.jsx)(n.code,{children:"signing_method"}),") match the spec."]}),"\n",(0,s.jsxs)(n.li,{children:["Upload failures: ensure you send ",(0,s.jsx)(n.code,{children:"multipart/form-data"})," and pass ",(0,s.jsx)(n.code,{children:"form.getHeaders()"})," so Krebit can parse the file."]}),"\n",(0,s.jsx)(n.li,{children:"Recipient reminders: Krebit cannot remind signers before the signing is sent or after all decisions are made\u2014handle 400 responses gracefully."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"5-testing-and-validation-instructions-1",children:"5. Testing and validation instructions"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Unit: Mock axios to ensure payloads use the correct routes and headers."}),"\n",(0,s.jsxs)(n.li,{children:["Manual: Create a sandbox signing, confirm recipients receive the invitation, and verify the draft transitions from ",(0,s.jsx)(n.code,{children:"is_draft=true"})," to ",(0,s.jsx)(n.code,{children:"false"})," when sent."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"6-additional-considerations-and-future-enhancements-1",children:"6. Additional considerations and future enhancements"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Allow uploading multiple documents before dispatch."}),"\n",(0,s.jsxs)(n.li,{children:["Surface signer order and statuses in your UI using ",(0,s.jsx)(n.code,{children:"GET /api/1.0/signings/{id}"})," and the recipients collection."]}),"\n",(0,s.jsx)(n.li,{children:"Store document metadata returned by Krebit so you can download originals or signed PDFs later."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"\n### Track signing status and download files\n\n"})}),"\n",(0,s.jsx)(n.h2,{id:"1-feature-overview-1",children:"1. Feature overview"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Feature name"}),": Signing status dashboard"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Objective"}),": List signings, inspect recipient progress, and download original or signed documents for archival."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"2-environment-and-dependencies-1",children:"2. Environment and dependencies"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Use the same authenticated axios client from previous prompts."}),"\n",(0,s.jsx)(n.li,{children:"Ensure your storage layer can persist cursors and downloaded file paths."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"3-implementation-details-1",children:"3. Implementation details"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"List signings"}),": GET ",(0,s.jsx)(n.code,{children:"/api/1.0/signings"})," with optional ",(0,s.jsx)(n.code,{children:"page[size]"})," and ",(0,s.jsx)(n.code,{children:"page[number]"})," (or Krebit's cursor parameters) to page through results. Display key fields such as ",(0,s.jsx)(n.code,{children:"name"}),", ",(0,s.jsx)(n.code,{children:"is_draft"}),", ",(0,s.jsx)(n.code,{children:"is_completed"}),", and timestamps."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Inspect a signing"}),": GET ",(0,s.jsx)(n.code,{children:"/api/1.0/signings/{id}"})," to retrieve signer order and message. Combine with GET ",(0,s.jsx)(n.code,{children:"/api/1.0/signings/{id}/recipients"})," if you need detailed recipient records."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Download documents"}),": Use axios with ",(0,s.jsx)(n.code,{children:"responseType: 'stream'"})," against ",(0,s.jsx)(n.code,{children:"/api/1.0/signings/{signingId}/documents/{documentId}/download-original"})," or ",(0,s.jsx)(n.code,{children:"/download-signed"}),". Pipe the stream to disk or object storage."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"const { data: list } = await client.get('/signings', {\n  params: { 'page[size]': 20 },\n});\n\nconst signingId = list.data[0].id;\nconst { data: signingDetails } = await client.get(`/signings/${signingId}`);\nconst { data: documents } = await client.get(`/signings/${signingId}/documents`);\nconst documentId = documents.data[0].id;\n\nconst response = await client.get(\n  `/signings/${signingId}/documents/${documentId}/download-signed`,\n  { responseType: 'stream' }\n);\nconst writeStream = fs.createWriteStream(`./downloads/${signingId}.pdf`);\nresponse.data.pipe(writeStream);\n"})}),"\n",(0,s.jsx)(n.h2,{id:"4-debugging-scenarios-and-error-handling-2",children:"4. Debugging scenarios and error handling"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Handle 404 responses when signings or documents were deleted or belong to a different tenant."}),"\n",(0,s.jsx)(n.li,{children:"Respect rate limits by backing off when you receive 429 errors and by caching completed signing summaries."}),"\n",(0,s.jsx)(n.li,{children:"Confirm you close streams to avoid file descriptor leaks."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"5-testing-and-validation-instructions-2",children:"5. Testing and validation instructions"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Write integration tests that stub the Krebit API and assert pagination cursors are passed correctly."}),"\n",(0,s.jsx)(n.li,{children:"Manually complete a signing, then verify the signed PDF downloads and matches the document in the Krebit dashboard."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"6-additional-considerations-and-future-enhancements-2",children:"6. Additional considerations and future enhancements"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Build webhooks that push status changes to the dashboard instead of polling."}),"\n",(0,s.jsx)(n.li,{children:"Encrypt downloaded files before storing them and implement retention policies that satisfy compliance needs."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"\n### Webhooks for signing lifecycle events\n\n"})}),"\n",(0,s.jsx)(n.h2,{id:"1-feature-overview-2",children:"1. Feature overview"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Feature name"}),": Krebit webhook listener"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Objective"}),": Subscribe to signing events (sent, cancelled, document completed) and process them in real time."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"2-environment-and-dependencies-2",children:"2. Environment and dependencies"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Use ",(0,s.jsx)(n.code,{children:"/api/1.0/webhooks"})," endpoints with your bearer token."]}),"\n",(0,s.jsxs)(n.li,{children:["Environment variables: ",(0,s.jsx)(n.code,{children:"KREBIT_WEBHOOK_SECRET"})," (store the value returned when creating a webhook)."]}),"\n",(0,s.jsx)(n.li,{children:"Dependencies: Express.js (or your HTTP framework), axios for webhook management, and a signature verification helper."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"3-implementation-details-2",children:"3. Implementation details"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Create a webhook"}),": POST ",(0,s.jsx)(n.code,{children:"/api/1.0/webhooks"})," with ",(0,s.jsx)(n.code,{children:"{ event: 'signing.document.completed', target: 'https://yourapp.example.com/webhooks/krebit' }"}),". Persist the returned ",(0,s.jsx)(n.code,{children:"id"})," and ",(0,s.jsx)(n.code,{children:"secret"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Handle incoming events"}),": Expose ",(0,s.jsx)(n.code,{children:"POST /webhooks/krebit"})," that reads the raw request body, verifies the signature using the shared secret (for example, HMAC-SHA256), and enqueues work."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"app.post('/webhooks/krebit', express.raw({ type: 'application/json' }), (req, res) => {\n  const signature = req.header('X-Krebit-Signature'); // Confirm the exact header name in your tenant configuration.\n  if (!verifySignature(req.body, signature, process.env.KREBIT_WEBHOOK_SECRET!)) {\n    return res.status(400).send('Invalid signature');\n  }\n\n  const event = JSON.parse(req.body.toString());\n  queue.enqueue(event);\n  res.status(202).end();\n});\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Process events"}),": Handle ",(0,s.jsx)(n.code,{children:"signing.sent"})," to notify internal teams, ",(0,s.jsx)(n.code,{children:"signing.document.completed"})," to archive files, and ",(0,s.jsx)(n.code,{children:"signing.cancelled"})," to unblock rescheduling."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Rotate secrets"}),": When necessary, delete and recreate the webhook with a new secret, then update your configuration to use the replacement credentials."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"4-debugging-scenarios-and-error-handling-3",children:"4. Debugging scenarios and error handling"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Signature mismatches: ensure you capture the raw body (before JSON parsing) and use the correct hashing algorithm."}),"\n",(0,s.jsx)(n.li,{children:"Delivery failures: Krebit may deactivate the webhook after repeated 500 errors\u2014monitor logs and re-enable when fixed."}),"\n",(0,s.jsx)(n.li,{children:"Duplicate events: design idempotent handlers keyed by event ID to avoid processing the same update twice."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"5-testing-and-validation-instructions-3",children:"5. Testing and validation instructions"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Use Krebit's webhook testing tools or an HTTP tunneling service to send sample payloads to your local environment."}),"\n",(0,s.jsxs)(n.li,{children:["Write unit tests that feed recorded webhook bodies into ",(0,s.jsx)(n.code,{children:"verifySignature"})," and assert that invalid signatures are rejected."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"6-additional-considerations-and-future-enhancements-3",children:"6. Additional considerations and future enhancements"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Store webhook payloads with metadata (received timestamp, status) for auditing."}),"\n",(0,s.jsx)(n.li,{children:"Chain notifications into your analytics pipeline or trigger asynchronous workflows such as document archiving."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);